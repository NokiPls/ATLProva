/**
 */
package cs.provider;

import cs.util.CsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CsItemProviderAdapterFactory extends CsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.MonitoredCity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitoredCityItemProvider monitoredCityItemProvider;

	/**
	 * This creates an adapter for a {@link cs.MonitoredCity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitoredCityAdapter() {
		if (monitoredCityItemProvider == null) {
			monitoredCityItemProvider = new MonitoredCityItemProvider(this);
		}

		return monitoredCityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link cs.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.District} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistrictItemProvider districtItemProvider;

	/**
	 * This creates an adapter for a {@link cs.District}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistrictAdapter() {
		if (districtItemProvider == null) {
			districtItemProvider = new DistrictItemProvider(this);
		}

		return districtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.CitySensing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CitySensingItemProvider citySensingItemProvider;

	/**
	 * This creates an adapter for a {@link cs.CitySensing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCitySensingAdapter() {
		if (citySensingItemProvider == null) {
			citySensingItemProvider = new CitySensingItemProvider(this);
		}

		return citySensingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapPostLangItemProvider mapPostLangItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapPostLangAdapter() {
		if (mapPostLangItemProvider == null) {
			mapPostLangItemProvider = new MapPostLangItemProvider(this);
		}

		return mapPostLangItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.NumPost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumPostItemProvider numPostItemProvider;

	/**
	 * This creates an adapter for a {@link cs.NumPost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumPostAdapter() {
		if (numPostItemProvider == null) {
			numPostItemProvider = new NumPostItemProvider(this);
		}

		return numPostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.NumPhoto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumPhotoItemProvider numPhotoItemProvider;

	/**
	 * This creates an adapter for a {@link cs.NumPhoto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumPhotoAdapter() {
		if (numPhotoItemProvider == null) {
			numPhotoItemProvider = new NumPhotoItemProvider(this);
		}

		return numPhotoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.NumPostTimeSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumPostTimeSlotItemProvider numPostTimeSlotItemProvider;

	/**
	 * This creates an adapter for a {@link cs.NumPostTimeSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumPostTimeSlotAdapter() {
		if (numPostTimeSlotItemProvider == null) {
			numPostTimeSlotItemProvider = new NumPostTimeSlotItemProvider(this);
		}

		return numPostTimeSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.NumPostLang} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumPostLangItemProvider numPostLangItemProvider;

	/**
	 * This creates an adapter for a {@link cs.NumPostLang}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumPostLangAdapter() {
		if (numPostLangItemProvider == null) {
			numPostLangItemProvider = new NumPostLangItemProvider(this);
		}

		return numPostLangItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapPostTimeSlotItemProvider mapPostTimeSlotItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapPostTimeSlotAdapter() {
		if (mapPostTimeSlotItemProvider == null) {
			mapPostTimeSlotItemProvider = new MapPostTimeSlotItemProvider(this);
		}

		return mapPostTimeSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cs.CategoriesCount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoriesCountItemProvider categoriesCountItemProvider;

	/**
	 * This creates an adapter for a {@link cs.CategoriesCount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoriesCountAdapter() {
		if (categoriesCountItemProvider == null) {
			categoriesCountItemProvider = new CategoriesCountItemProvider(this);
		}

		return categoriesCountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapCategoriesItemProvider mapCategoriesItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapCategoriesAdapter() {
		if (mapCategoriesItemProvider == null) {
			mapCategoriesItemProvider = new MapCategoriesItemProvider(this);
		}

		return mapCategoriesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (monitoredCityItemProvider != null) monitoredCityItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (districtItemProvider != null) districtItemProvider.dispose();
		if (citySensingItemProvider != null) citySensingItemProvider.dispose();
		if (mapPostLangItemProvider != null) mapPostLangItemProvider.dispose();
		if (numPostItemProvider != null) numPostItemProvider.dispose();
		if (numPhotoItemProvider != null) numPhotoItemProvider.dispose();
		if (numPostTimeSlotItemProvider != null) numPostTimeSlotItemProvider.dispose();
		if (numPostLangItemProvider != null) numPostLangItemProvider.dispose();
		if (mapPostTimeSlotItemProvider != null) mapPostTimeSlotItemProvider.dispose();
		if (categoriesCountItemProvider != null) categoriesCountItemProvider.dispose();
		if (mapCategoriesItemProvider != null) mapCategoriesItemProvider.dispose();
	}

}
