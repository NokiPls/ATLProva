context City {
	// Check that districts are not geographically overlapping
	constraint DistrictsOverlap {
	
		guard : self.districts.isDefined()
	
		check : self.districts -> select(d1 | self.districts -> exists(d2 | d1 <> d2 
				// A district begins within another one
				and (d1.coordBx < d2.coordBx and d1.coordEx > d2.coordBx and d1.coordBy < d2.coordBy 
				and d1.coordEy > d2.coordBy) 
				// A districts ends within another one
				or 	(d1.coordBx < d2.coordEx and d1.coordEx > d2.coordEx
				and d1.coordBy < d2.coordEy and d1.coordEy > d2.coordEy))) -> size() == 0
					
		message : 'There are overlapping districts.'
		
	}

}

context Place {
	// A category may appear only once per place
	constraint DuplicateCategory{
		
		// Taking the number of all the categories
		check : self.categories -> collect(c | c.type) -> size()
		
		// Are they in the same number of the same collection, without duplicates?
				== self.categories -> collect(c | c.type) -> asOrderedSet() -> size()
		
		message : 'Duplicate category found.'
	
		fix {
		
			title : 'Eliminate duplicates.'
			
			do {
				var oldCateg = self.categories;
				// A set with one element for sure has no duplicates
				var newCateg = Set{self.categories -> asOrderedSet() -> first()};
				
				// Populating a new set of categories, 
				// checking one by one that such category is not already present
				for(c in oldCateg){
					if(not (newCateg -> collect(cat | cat.type) -> includes(c.type))){
						newCateg = newCateg + Set{c};
					}
				}
				
				self.categories = newCateg;
			}
		}
	}

}