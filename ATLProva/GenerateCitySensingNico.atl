-- @path CitySensing=/ATLProva/CitySensing.ecore
-- @path SocialResource=/ATLProva/SocialResource.ecore
-- @path City=/ATLProva/City.ecore

module GenerateCitySensingNico;
create OUT: CitySensing from IN: SocialResource, IN2: City;


helper context SocialResource!Post def: isInCityCoords(d : City!City) : Boolean =
	if d.coordBx <= self.location.coordinates.coordx and d.coordEx > self.location.coordinates.coordx
		and d.coordBy <= self.location.coordinates.coordy and d.coordEy > self.location.coordinates.coordy
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: isInDistrictCoords(d : City!District) : Boolean =
	if d.coordBx <= self.location.coordinates.coordx and d.coordEx > self.location.coordinates.coordx
		and d.coordBy <= self.location.coordinates.coordy and d.coordEy > self.location.coordinates.coordy
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasCityName() : Boolean =
	if not self.location.city.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def : hasCategory() : Boolean =
	if not self.categories.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasDistrictName() : Boolean =
	if not self.location.district.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: isInPlaceName(d : City!Place) : Boolean =
	--- If the place's name is in the location or it's in the tags
	if self.location.place.name = d.name or self.text.tags -> select(p | p.text = d.name).size() > 0
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasText() : Boolean =
	if not self.text.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasCoordinates() : Boolean =
	if not self.location.coordinates.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasTime(): Boolean =
	if not self.time.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasPlace(): Boolean =
	if not self.location.place.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasLocation(): Boolean =
	if not self.location.oclIsUndefined()
	then
		true
	else
		false
	endif;

helper context SocialResource!Post def: hasPicture(): Boolean =
	if self.pictures -> size() > 0
	then
		true
	else
		false
	endif;

helper context SocialResource!SocialMediaResource def : postsInCity(city : City!City) : OrderedSet(SocialResource!Post) =
	--- Posts with coordinates
	let lp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasCoordinates())	
	in 
	--- Posts with tags
	let	tp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasText()) -> select(p | p.text.tags.notEmpty())
	in 
	--- Posts with city name
	let cp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasCityName())
	in
	--- Magari mettere che un tag contiene il nome di una cittÃ 
		lp -> select(e | e.isInCityCoords(city)).union(tp -> select(w | w.text.tags.text = city.name))
		.union(cp -> select(k | k.location.city = city.name))
;

helper context SocialResource!SocialMediaResource def : postsInDistrict(district : City!District) : OrderedSet(SocialResource!Post) =
	let lp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasCoordinates())
	in 
	let tp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasText()) -> select(p | p.text.tags.notEmpty()) 
	in
	let cp : OrderedSet(SocialResource!Post) = 
		self.posts -> select(p | p.hasDistrictName())
	in
		lp -> select(e | e.isInDistrictCoords(district)).union(tp -> select(w | w.text.tags.text = district.name))
		.union(cp -> select(k | k.location.district = district.name))
;
		
helper context SocialResource!SocialMediaResource def : postsInPlace(place : City!Place) : OrderedSet(SocialResource!Post) =
	let np : OrderedSet(SocialResource!Post) =
		self.posts -> select(p | p.hasLocation()) -> select(p | p.hasPlace())
	in 
	let tp : OrderedSet(SocialResource!Post) =
		self.posts -> select(p | p.hasText()) -> select(p | p.text.tags.notEmpty())
	in
		np -> select(e | e.isInPlaceName(place)).union(tp -> select(e | e.text.tags.text = place.name))
;
		
helper context CitySensing!TimeSlots def : postsInTimeSlot(dp : OrderedSet(SocialResource!Post)) : Integer =
	if self.literal.toString() = 'Morning' then
		dp -> select(e | 4 <= e.time.getHours() and 12 > e.time.getHours()).size()
	else if self.literal.toString() = 'Afternoon' then
		dp -> select(e | 12 <= e.time.getHours() and 18 > e.time.getHours()).size()
	else if self.literal.toString() = 'Evening' then
		dp -> select(e | 18 <= e.time.getHours() and 22 > e.time.getHours()).size()
	else if self.literal.toString() = 'Night' then
		dp -> select(e | 22 <= e.time.getHours() and 24 > e.time.getHours() or 
			0 <= e.time.getHours() and 4 > e.time.getHours()).size()
	else 0 --- Sarebbe un errore
	endif
	endif
	endif
	endif
;

helper context City!City def: countPostsCity(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInCity(self).size();
				
helper context City!District def: countPostsDistrict(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInDistrict(self).size();
		
helper context City!Place def: countPostsPlace(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInPlace(self).size();

helper context City!City def: countPicturesCity(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInCity(self) -> select(p | p.hasPicture()) -> collect(p | p.pictures).size();

--- Actually, it's posts with at least 1 picture, not total of pictures
helper context City!District def: countPicturesDistrict(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInDistrict(self) -> select(p | p.hasPicture()) -> collect(p | p.pictures).size();

--- Same here
helper context City!Place def: countPicturesPlace(mr : SocialResource!SocialMediaResource) : Real =
	mr.postsInPlace(self) -> select(p | p.hasPicture()) -> collect(p | p.pictures).size();
		
helper context City!City def : countPostLangCity(mr : SocialResource!SocialMediaResource, l : SocialResource!Languages) : Integer =
	mr.postsInCity(self) -> select(e | e.language.toString() = l.literal.toString()).size();

helper context City!District def : countPostLangDistrict(mr : SocialResource!SocialMediaResource, l : SocialResource!Languages) : Integer =
	mr.postsInDistrict(self) -> select(e | e.language.toString() = l.literal.toString()).size();

helper context City!Place def : countPostLangPlace(mr : SocialResource!SocialMediaResource, l : SocialResource!Languages) : Integer =
	mr.postsInPlace(self) -> select(e | e.language.toString() = l.literal.toString()).size();

helper context City!City def : countPostTimeSlotCity(mr : SocialResource!SocialMediaResource, l : CitySensing!TimeSlots) : Integer =
	let dp : OrderedSet(SocialResource!Post) = 
		mr.postsInCity(self) -> select(p | p.hasTime())
	in
		l.postsInTimeSlot(dp)
;

helper context City!District def : countPostTimeSlotDistrict(mr : SocialResource!SocialMediaResource, l : CitySensing!TimeSlots) : Integer =
	let dp : OrderedSet(SocialResource!Post) = 
		mr.postsInDistrict(self) -> select(p | p.hasTime())
	in
		l.postsInTimeSlot(dp)
;

helper context City!Place def : countPostTimeSlotPlace(mr : SocialResource!SocialMediaResource, l : CitySensing!TimeSlots) : Integer =
	let dp : OrderedSet(SocialResource!Post) = 
		mr.postsInPlace(self) -> select(p | p.hasTime())
	in
		l.postsInTimeSlot(dp)
;

helper context City!City def : countPostCategoryCity(mr : SocialResource!SocialMediaResource, l : CitySensing!Categories) : Integer =
		mr.postsInCity(self) -> select(p | p.hasCategory()) -> select(p | p.categories.type.toString() = l.literal.toString()).size()
;

helper context City!District def : countPostCategoryDistrict(mr : SocialResource!SocialMediaResource, l : CitySensing!Categories) : Integer =
		mr.postsInDistrict(self) -> select(p | p.hasCategory()) -> select(p | p.categories.type.toString() = l.literal.toString()).size()
;

helper context City!Place def : countPostCategoryPlace(mr : SocialResource!SocialMediaResource, l : CitySensing!Categories) : Integer =
		mr.postsInPlace(self) -> select(p | p.hasCategory()) -> select(p | p.categories.type.toString() = l.literal.toString()).size()
;

rule City2MonitoredCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
		
	to 
		t: CitySensing!MonitoredCity (
			name <- s.name,
			districts <- s.districts,
			stats <- Sequence{ thisModule.Post2NumPostsCity(s, p), thisModule.Post2NumPhotoCity(s, p), 
				thisModule.Post2NumPostLangCity(s, p), thisModule.Post2NumPostTimeSlotCity(s, p),
				thisModule.Post2CategoriesCountCity(s, p) }
		)
	
}

rule District2MonitoredDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
		
	to
		t: CitySensing!District (
			name <- s.name,
			coordBx <- s.coordBx,
			coordBy <- s.coordBy,
			coordEx <- s.coordEx,
			coordEy <- s.coordEy,
			places <- s.places,
			stats <- Sequence{thisModule.Post2NumPostsDist(s, p), thisModule.Post2NumPhotoDist(s, p), 
				thisModule.Post2NumPostLangDist(s, p), thisModule.Post2NumPostTimeSlotDist(s, p)}
		)
	
}

rule Place2MonitoredPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
		
	to
		t: CitySensing!Place (
			name <- s.name,
			stats <- Sequence{ thisModule.Post2NumPostsPlace(s, p), thisModule.Post2NumPhotoPlace(s, p), 
					thisModule.Post2NumPostLangPlace(s, p), thisModule.Post2NumPostTimeSlotPlace(s, p) }
		)
	
}

lazy rule Post2NumPostsCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPost (
			name <- '#Posts',
			metric <- s.countPostsCity(p).longValue()
		)
	
}

lazy rule Post2NumPostsDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPost (
			name <- '#Posts',
			metric <- s.countPostsDistrict(p).longValue()
		)
	
}

lazy rule Post2NumPostsPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPost (
			name <- '#Posts',
			metric <- s.countPostsPlace(p).longValue()
		)
	
}

lazy rule Post2NumPhotoCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPhoto (
			name <- '#Pictures',
			metric <- s.countPicturesCity(p).longValue()
		)
	
}

lazy rule Post2NumPhotoDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPhoto (
			name <- '#Pictures',
			metric <- s.countPicturesDistrict(p).longValue()
		)
	
}

lazy rule Post2NumPhotoPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPhoto (
			name <- '#Pictures',
			metric <- s.countPicturesPlace(p).longValue()
		)
	
}

lazy rule Post2NumPostTimeSlotCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostTimeSlot (
			name <- '#Posts per time slot',
			postsPerTimeSlot <- CitySensing!TimeSlots.eLiterals 
								-> collect(l | thisModule.Post2MapPostTimeSlotCity(s, p, l))
		)
			
}

lazy rule Post2NumPostTimeSlotDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostTimeSlot (
			name <- '#Posts per time slot',
			postsPerTimeSlot <- CitySensing!TimeSlots.eLiterals 
								-> collect(l | thisModule.Post2MapPostTimeSlotDistrict(s, p, l))
		)
			
}

lazy rule Post2NumPostTimeSlotPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostTimeSlot (
			name <- '#Posts per time slot',
			postsPerTimeSlot <- CitySensing!TimeSlots.eLiterals 
								-> collect(l | thisModule.Post2MapPostTimeSlotPlace(s, p, l))
		)
			
}

lazy rule Post2MapPostTimeSlotCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource,
		l: CitySensing!TimeSlots
	to
		t: CitySensing!MapPostTimeSlot (
				key <- l,
				value <- s.countPostTimeSlotCity(p, l)
		)
	
}

lazy rule Post2MapPostTimeSlotDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource,
		l: CitySensing!TimeSlots
	to
		t: CitySensing!MapPostTimeSlot (
				key <- l,
				value <- s.countPostTimeSlotDistrict(p, l)
		)
	
}

lazy rule Post2MapPostTimeSlotPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource,
		l: CitySensing!TimeSlots
	to
		t: CitySensing!MapPostTimeSlot (
				key <- l,
				value <- s.countPostTimeSlotPlace(p, l)
		)
	
}

lazy rule Post2NumPostLangCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostLang (
			name <- '#Posts per language',
			langNumber <- SocialResource!Languages.eLiterals 
						-> collect(l | thisModule.Post2MapPostLangCity(s, p, l))
		)
			
}

lazy rule Post2NumPostLangDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostLang (
			name <- '#Posts per language',
			langNumber <- SocialResource!Languages.eLiterals 
						-> collect(l | thisModule.Post2MapPostLangDistrict(s, p, l))
		)
			
}

lazy rule Post2NumPostLangPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!NumPostLang (
			name <- '#Posts per language',
			langNumber <- SocialResource!Languages.eLiterals 
						-> collect(l | thisModule.Post2MapPostLangPlace(s, p, l))
		)
			
}

lazy rule Post2MapPostLangCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Languages
	to
		t: CitySensing!MapPostLang (
				key <- l,
				value <- s.countPostLangCity(p, l)
		)
	
}

lazy rule Post2MapPostLangDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Languages
	to
		t: CitySensing!MapPostLang (
				key <- l,
				value <- s.countPostLangDistrict(p, l)
		)
	
}

lazy rule Post2MapPostLangPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Languages
	to
		t: CitySensing!MapPostLang (
				key <- l,
				value <- s.countPostLangPlace(p, l)
		)
	
}

lazy rule Post2CategoriesCountCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!CategoriesCount (
			name <- '#Posts per Category',
			catNumber <- CitySensing!Categories.eLiterals 
								-> collect(l | thisModule.Post2MapCategoriesCity(s, p, l))
		)
	
}

lazy rule Post2CategoriesCountDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!CategoriesCount (
			name <- '#Posts per Category',
			catNumber <- CitySensing!Categories.eLiterals 
								-> collect(l | thisModule.Post2MapCategoriesDistrict(s, p, l))
		)
	
}

lazy rule Post2CategoriesCountPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource
	to
		t: CitySensing!CategoriesCount (
			name <- '#Posts per Category',
			catNumber <- CitySensing!Categories.eLiterals 
								-> collect(l | thisModule.Post2MapCategoriesPlace(s, p, l))
		)
	
}

lazy rule Post2MapCategoriesCity {
	
	from
		s: City!City,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Categories
	to
		t: CitySensing!MapCategories (
				key <- l,
				value <- s.countPostCategoryCity(p, l)
		)
	
}

lazy rule Post2MapCategoriesDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Categories
	to
		t: CitySensing!MapCategories (
				key <- l,
				value <- s.countPostCategoryDistrict(p, l)
		)
	
}

lazy rule Post2MapCategoriesPlace {
	
	from
		s: City!Place,
		p: SocialResource!SocialMediaResource,
		l: SocialResource!Categories
	to
		t: CitySensing!MapCategories (
				key <- l,
				value <- s.countPostCategoryPlace(p, l)
		)
	
}














